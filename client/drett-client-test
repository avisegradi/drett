#!/usr/bin/env python

"""
Resource tracker client library

Copyright (C) 2014 Adam Visegradi

Author: Adam Visegradi <a.visegradi@gmail.com>
License: Lesser GPLv3.0
"""

from drett.client import *

import yaml

# Logging is only configured if running in standalone mode
import logging.config
with open('logging.yaml') as f:
    logging.config.dictConfig(yaml.load(f))
# In this case the logger must be re-created with new configuration
_log = logging.getLogger('drett_client')

_log.info('Starting up')

#setup('http://c153-40.localcloud/cgi-bin/drett_server.py')
setup('http://localhost:5001/drett')

a = AllocationBlock(application='app:demo', module='module:demo', default_resource_owner='lpds')
r1 = a.ResourceAllocation(resource_type='vm')
r2 = a.ResourceAllocation('lpds', 'image')
_log.debug('Entering allocation block')
with a: # <- PENDING
    _log.debug('Entered allocation block')
    _log.debug('Entering resource allocation')
    with r1: # <- PENDING
        _log.debug('Entered resource allocation')
        rid1 = 'imageid_1' # acq. res.
        _log.debug('Resource allocated')
        r1.set_resource_data(
            resource_id=rid1, data='optional') # <- ALLOCATED / FAILED
    _log.debug('Entering resource allocation')
    with r2: # <- PENDING
        _log.debug('Entered resource allocation')
        rid2 = 'imageid_2' # acq. res.
        _log.debug('Resource allocated')
        r2.set_resource_data(
            resource_id=rid2, data='optional') # <- ALLOCATED / FAILED
    # <- DONE / FAILED

#free(r2)
_log.debug('Freeing resource')
r2.freed()
#free(r1)
_log.debug('Freeing resource')
r1.freed()

#a = Allocation(application='app:demo', module='module:demo',
#               resource_owner='lpds', resource_type='vm')
#with a: # Both allocation and a single resource are created PENDING
#    rid = 'imageid_0' # acq. res.
#    # Alloc DONE, res. ALLOCATED (or FAILED+FAILED))
#    a.set_resource_data(rid, data='optional')
##free(a.resource)
#a.freed() # <- Resource: FREED
